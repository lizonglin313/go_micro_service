// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: sum_concat.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A int64 `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	B int64 `protobuf:"varint,2,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *SumRequest) Reset() {
	*x = SumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sum_concat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumRequest) ProtoMessage() {}

func (x *SumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sum_concat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumRequest.ProtoReflect.Descriptor instead.
func (*SumRequest) Descriptor() ([]byte, []int) {
	return file_sum_concat_proto_rawDescGZIP(), []int{0}
}

func (x *SumRequest) GetA() int64 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *SumRequest) GetB() int64 {
	if x != nil {
		return x.B
	}
	return 0
}

type SumResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply int64 `protobuf:"varint,1,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *SumResponse) Reset() {
	*x = SumResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sum_concat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumResponse) ProtoMessage() {}

func (x *SumResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sum_concat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumResponse.ProtoReflect.Descriptor instead.
func (*SumResponse) Descriptor() ([]byte, []int) {
	return file_sum_concat_proto_rawDescGZIP(), []int{1}
}

func (x *SumResponse) GetReply() int64 {
	if x != nil {
		return x.Reply
	}
	return 0
}

type ConcatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A string `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	B string `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *ConcatRequest) Reset() {
	*x = ConcatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sum_concat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcatRequest) ProtoMessage() {}

func (x *ConcatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sum_concat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcatRequest.ProtoReflect.Descriptor instead.
func (*ConcatRequest) Descriptor() ([]byte, []int) {
	return file_sum_concat_proto_rawDescGZIP(), []int{2}
}

func (x *ConcatRequest) GetA() string {
	if x != nil {
		return x.A
	}
	return ""
}

func (x *ConcatRequest) GetB() string {
	if x != nil {
		return x.B
	}
	return ""
}

type ConcatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply string `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *ConcatResponse) Reset() {
	*x = ConcatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sum_concat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcatResponse) ProtoMessage() {}

func (x *ConcatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sum_concat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcatResponse.ProtoReflect.Descriptor instead.
func (*ConcatResponse) Descriptor() ([]byte, []int) {
	return file_sum_concat_proto_rawDescGZIP(), []int{3}
}

func (x *ConcatResponse) GetReply() string {
	if x != nil {
		return x.Reply
	}
	return ""
}

var File_sum_concat_proto protoreflect.FileDescriptor

var file_sum_concat_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a, 0x0a, 0x53, 0x75, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x01, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x01, 0x62, 0x22, 0x23, 0x0a, 0x0b, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2b, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x63,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x62, 0x22, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x32, 0x70, 0x0a,
	0x09, 0x53, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x53, 0x75,
	0x6d, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x63,
	0x61, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_sum_concat_proto_rawDescOnce sync.Once
	file_sum_concat_proto_rawDescData = file_sum_concat_proto_rawDesc
)

func file_sum_concat_proto_rawDescGZIP() []byte {
	file_sum_concat_proto_rawDescOnce.Do(func() {
		file_sum_concat_proto_rawDescData = protoimpl.X.CompressGZIP(file_sum_concat_proto_rawDescData)
	})
	return file_sum_concat_proto_rawDescData
}

var file_sum_concat_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_sum_concat_proto_goTypes = []interface{}{
	(*SumRequest)(nil),     // 0: proto.SumRequest
	(*SumResponse)(nil),    // 1: proto.SumResponse
	(*ConcatRequest)(nil),  // 2: proto.ConcatRequest
	(*ConcatResponse)(nil), // 3: proto.ConcatResponse
}
var file_sum_concat_proto_depIdxs = []int32{
	0, // 0: proto.SumConcat.Sum:input_type -> proto.SumRequest
	2, // 1: proto.SumConcat.Concat:input_type -> proto.ConcatRequest
	1, // 2: proto.SumConcat.Sum:output_type -> proto.SumResponse
	3, // 3: proto.SumConcat.Concat:output_type -> proto.ConcatResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sum_concat_proto_init() }
func file_sum_concat_proto_init() {
	if File_sum_concat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sum_concat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sum_concat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sum_concat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sum_concat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sum_concat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sum_concat_proto_goTypes,
		DependencyIndexes: file_sum_concat_proto_depIdxs,
		MessageInfos:      file_sum_concat_proto_msgTypes,
	}.Build()
	File_sum_concat_proto = out.File
	file_sum_concat_proto_rawDesc = nil
	file_sum_concat_proto_goTypes = nil
	file_sum_concat_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SumConcatClient is the client API for SumConcat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SumConcatClient interface {
	Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
	Concat(ctx context.Context, in *ConcatRequest, opts ...grpc.CallOption) (*ConcatResponse, error)
}

type sumConcatClient struct {
	cc grpc.ClientConnInterface
}

func NewSumConcatClient(cc grpc.ClientConnInterface) SumConcatClient {
	return &sumConcatClient{cc}
}

func (c *sumConcatClient) Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/proto.SumConcat/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sumConcatClient) Concat(ctx context.Context, in *ConcatRequest, opts ...grpc.CallOption) (*ConcatResponse, error) {
	out := new(ConcatResponse)
	err := c.cc.Invoke(ctx, "/proto.SumConcat/Concat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SumConcatServer is the server API for SumConcat service.
type SumConcatServer interface {
	Sum(context.Context, *SumRequest) (*SumResponse, error)
	Concat(context.Context, *ConcatRequest) (*ConcatResponse, error)
}

// UnimplementedSumConcatServer can be embedded to have forward compatible implementations.
type UnimplementedSumConcatServer struct {
}

func (*UnimplementedSumConcatServer) Sum(context.Context, *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (*UnimplementedSumConcatServer) Concat(context.Context, *ConcatRequest) (*ConcatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Concat not implemented")
}

func RegisterSumConcatServer(s *grpc.Server, srv SumConcatServer) {
	s.RegisterService(&_SumConcat_serviceDesc, srv)
}

func _SumConcat_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SumConcatServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SumConcat/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SumConcatServer).Sum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SumConcat_Concat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConcatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SumConcatServer).Concat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SumConcat/Concat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SumConcatServer).Concat(ctx, req.(*ConcatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SumConcat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SumConcat",
	HandlerType: (*SumConcatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _SumConcat_Sum_Handler,
		},
		{
			MethodName: "Concat",
			Handler:    _SumConcat_Concat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sum_concat.proto",
}
